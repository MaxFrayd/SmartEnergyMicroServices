services:

  database:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123445
      MYSQL_DATABASE: smart_energy

    ports:
      - "3306:3306"

    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./mysql-initdb:/docker-entrypoint-initdb.d

    networks:
      backend:
        aliases:
          - "database"
  configserver:
    image: reznikov/configserver:0.0.1-SNAPSHOT
    ports:
       - "8071:8071"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    image: reznikov/eurekaserver:0.0.1-SNAPSHOT
    ports:
      - "8070:8070"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started  
    networks:
      backend:
        aliases:
          - "eurekaserver"
  gatewayserver:
    image: reznikov/gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8072"
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      EUREKASERVER_PORT: "8070"
      CONFIGSERVER_PORT: "8071"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"
  smartenergy:
    image: reznikov/smartenergy:0.0.1-SNAPSHOT
    environment:
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT:   "8071"
      DATABASESERVER_PORT: "3306"
      ENCRYPT_KEY:       "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "8082:8082"
    networks:
      - backend
  smartenergycustomer:
    image: reznikov/smartenergycustomer:0.0.1-SNAPSHOT
    environment:
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "3306"
      ENCRYPT_KEY: "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "8083:8083"
    networks:
      - backend

  paymentservice:
    image: reznikov/paymentservice:0.0.1-SNAPSHOT
    environment:
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "3306"
      ENCRYPT_KEY: "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "8084:8084"
    networks:
      - backend
  ragai:
    image: reznikov/ragai:0.0.1-SNAPSHOT
    environment:
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      ENCRYPT_KEY: "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "8085:8085"
    networks:
      - backend
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka:latest
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    ports:
      - "8091:8080"  # Expose AKHQ on localhost:8081
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka-cluster:
              properties:
                bootstrap.servers: "kafkaserver:9092"
    depends_on:
      - kafkaserver
    networks:
      backend:
        aliases:
          - "akhq"

  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"
volumes:
  esdata1:
    driver: local
networks:
  backend:
    driver: bridge